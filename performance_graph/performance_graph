#!/usr/bin/env python

import argparse
import glob
import os
from os import system, getcwd, listdir, walk
from os.path import exists, isfile
from datetime import datetime
from path import Path

def make_graph(input_str, output_fn, root_module, path_string):
       # create graph picture
       # TODO use pipes
       system(f'python -m cProfile -o profile {input_str}; '  # profiling
              f'gprof2dot -f pstats -p {path_string} -p {getcwd()} -e 0.05 -n 0.5 --root "{root_module}"  -o graph.dot profile; '  # graph
              f'dot graph.dot -Tpng -o {output_fn} ; '  # export to png
              f'rm profile graph.dot')  # delete everything except output


def _get_root_module_name(input_str):
    line_no = _find_start_of_python(file_name=input_str)
    return f"{script_stem}:{line_no}:<module>"


def _find_start_of_python(file_name):
    searching = True
    counter = 0
    with open(file_name, "r") as file:
        while searching:
            counter += 1
            line = file.readline()

            if _check(line):
                searching = False
    return counter

def _check(line):
    comment = line.strip().startswith("#")
    space = True if line.strip() == "\n" else False

    if comment or space:
        return False
    else:
        return True

def _path_string():
    top_lvl = [ f.split(".")[0] for f in glob.glob("*.py")]
    dirs = [os.path.basename(os.path.dirname(d)) for d in glob.glob(f"{os.getcwd()}/*/")]
    modules = top_lvl + dirs
    return " -p ".join(modules)



if __name__== '__main__':

       # current time
       time = str(datetime.now()).split('.')[0].split(' ')
       time = '-'.join(time)[:-3]
       # TODO enhance arparser
       # CLI interface
       parser = argparse.ArgumentParser(description='Enter file name. Use this script from project root.')
       parser.add_argument('fn', help='specify file')
       args = parser.parse_args()
       input_str = args.fn               # target file name w/o parent folder
       entire_path = Path(getcwd()) / input_str
       script_name, script_stem = str(entire_path.name), entire_path.stem
       assert exists(entire_path), 'Input file not found.'
       folder = input_str[:-len(script_name)-1]
       path_string = _path_string()
       root_module = _get_root_module_name(input_str)
       output_fn = f'{entire_path.parent / script_name.split(".")[0]}-{time}.png'     # file name of output png
       make_graph(input_str, output_fn, root_module, path_string)            # invoke make_graph fn

       if isfile(output_fn):
            print(f"Saved the project graph as {output_fn}")
       # TODO readme
